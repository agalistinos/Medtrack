//
//  MedtrackApp.swift
//  Medtrack
//
//  Created by Andre Galistinos on 6/26/23.
//

import SwiftUI
import Firebase
import FirebaseCore
import FirebaseAuth
import GoogleMobileAds
import UIKit
import UserNotifications
import FirebaseMessaging

class AppDelegate: NSObject, UIApplicationDelegate, MessagingDelegate, UNUserNotificationCenterDelegate {

    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        FirebaseApp.configure()
        Messaging.messaging().delegate = self
        GADMobileAds.sharedInstance().start(completionHandler: nil)
        
        let authOptions: UNAuthorizationOptions = [.alert, .badge, .sound]
        UNUserNotificationCenter.current().requestAuthorization(options: authOptions) { (granted, error) in
            if granted {
                print("User granted notifications permission")
            } else {
                print("User denied notifications permission")
            }
            
            if let error = error {
                print("Error requesting notifications permission: \(error)")
            }
        }

        UNUserNotificationCenter.current().delegate = self

        application.registerForRemoteNotifications()
        return true
    }
    
    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
        Messaging.messaging().apnsToken = deviceToken
    }
    
    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {
        print("Failed to register for notifications: \(error)")
    }

    func messaging(_ messaging: Messaging, didReceiveRegistrationToken fcmToken: String?) {
        print("Firebase registration token: \(fcmToken ?? "")")
    }
    
    func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {
        completionHandler([.banner, .badge, .sound])
    }


    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {
        completionHandler()
    }

}

@main
struct Medtrack: App {
    // Register app delegate for Firebase setup
    @UIApplicationDelegateAdaptor(AppDelegate.self) var delegate
    @StateObject private var viewModel = AuthenticationViewModel()
    
    var body: some Scene {
        WindowGroup {
            switch viewModel.authenticationState {
            case .unauthenticated, .authenticating:
                LoginView().environmentObject(viewModel)
            case .authenticated:
                NavigationView {
                    HomeView()
                }
                .environmentObject(viewModel)  // Move .environmentObject(viewModel) here
            }
        }
    }
}

